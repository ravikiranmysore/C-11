/* Modern C++ : Smart Pointer
  Issue with raw pointers
   * Allocation, Deallocation, Lifetime management.
   * Serious Problems : Uninitialized pointer,Memory leaks,Dangling pointer, Not Exception safe.
   
Smart Pointers : Objects, can only point to heap allocation, automatically call delete
 * Unique pointers, Shared pointers, weak pointers
 * #include<memory>
 * Provides dereference(*), Member selection(->), Pointer arithematic not supported(++,--)
 
  RAII :
   * allocated on stack,
   * Resource acquisition -> open a file,allocate memory, acquire a lock.
   * Is initialization : resource is acquired in a constructor.
   * Resource relinquishing : happens in destructor -> close the file, Deallocate memory, Release lock.

unique_ptr<T>

smart pointer is a class that handle reallocation of memory.
 * SMART POINTERS in C++ (std::unique_ptr, std::shared_ptr, std::weak_ptr)
 * automate the process  - when you call new, you dont have to call delete.
 * std::unique_ptr is a scoped pointer, gets destroyed when it is out of scope.
 *          you cannot copy unique pointer.
 * unique_ptr<> is one of the Smart pointer implementation provided by c++11 to prevent memory leaks
 * We can not copy a unique_ptr object, its only movable.
 * assignement operator is deleted. you cannot copy it.
 * 
Each shared_ptr object internally points to two memory locations,
1.) Pointer to the object

2.) Pointer to control data that is used for reference counting
How Shared Ownership works with the help of Reference Counting:

* When a new shared_ptr object is associated with a pointer,then in its constructor it increases the refernce count associated with this pointer by 1.
* When any shared_ptr object goes out of scope then in its destructor it decrements the reference count of the associated pointer by 1. If reference count becomes 0 then it means no other shared_ptr object is associated with this memory, in that case it deletes that memory using “delete” function.
*/

 
 

#include <iostream>
#include <memory>

using namespace std;

struct Task
{
    int mId;
    Task(int id ) :mId(id)
    {
        cout<<"\nTask::Constructor\n"<<endl;
    }
    ~Task()
    {
        cout<<"\nTask::Destructor\n"<<endl;
    }
};

int main()
{
    // Empty unique_ptr object
    unique_ptr<int> ptr1;

    // Check if unique pointer object is empty
    if(!ptr1)
        cout<<"ptr1 is empty"<<endl;

    // Check if unique pointer object is empty
    if(ptr1 == nullptr)
        cout<<"ptr1 is empty"<<endl;

    // cannot create unique_ptr object by initializing through assignment
    // unique_ptr<Task> taskPtr2 = new Task(); // Compile Error

    // Create a unique_ptr object through raw pointer
    unique_ptr<Task> taskPtr(new Task(23)); // constructor called

    // Check if taskPtr is empty or it has an associated raw pointer
    if(taskPtr != nullptr)
        cout<<"taskPtr is  not empty"<<endl;

    //Access the element through unique_ptr
    cout <<taskPtr->mId <<endl;


    cout <<"Reset the taskPtr" <<endl;
    // Reseting the unique_ptr will delete the associated
    // raw pointer and make unique_ptr object empty
    taskPtr.reset();

    // Check if taskPtr is empty or it has an associated raw pointer
    if(taskPtr == nullptr)
        cout<<"taskPtr is empty"<<endl;

    // Create a unique_ptr object through raw pointer
    unique_ptr<Task> taskPtr2(new Task(55));
    if(taskPtr2 != nullptr)
        cout<<"taskPtr2 is  not empty"<<endl;

    // unique_ptr object is Not copyable
    //taskPtr = taskPtr2; //compile error
    // unique_ptr object is Not copyable
    //unique_ptr<Task> taskPtr3 = taskPtr2;

    {
        // Transfer the ownership
        unique_ptr<Task> taskPtr4 = move(taskPtr2);

        if(taskPtr2 == nullptr)
            cout<<"taskPtr2 is  empty"<<endl;

        // ownership of taskPtr2 is transfered to taskPtr4
        if(taskPtr4 != nullptr)
            cout<<"taskPtr4 is not empty"<<endl;

        cout<< taskPtr4->mId <<endl;
        //taskPtr4 goes out of scope and deletes the assocaited raw pointer
    }

    // Create a unique_ptr object through raw pointer
    unique_ptr<Task> taskPtr5(new Task(55));
    if(taskPtr5 != nullptr)
        cout<<"taskPtr5 is not empty"<<endl;

    // Release the ownership of object from raw pointer
    Task * ptr = taskPtr5.release();

    if(taskPtr5 == nullptr)
        cout<<"taskPtr5 is empty"<<endl;
    cout<<ptr->mId<<endl;

    delete ptr;

    return 0;
}
